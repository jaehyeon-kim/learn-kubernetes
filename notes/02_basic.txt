#### replication controller
# horizontal scaling
# recover failed pod

kubectl get node
kubectl create -f helloworld-replication-controller.yml
kubectl get pods
#NAME                          READY     STATUS    RESTARTS   AGE
#helloworld-controller-4h998   1/1       Running   0          11s
#helloworld-controller-bfd9r   1/1       Running   0          11s

kubectl describe pod helloworld-controller-4h998
=====
Name:           helloworld-controller-4h998
Namespace:      default
Node:           minikube/10.0.2.15
Start Time:     Sun, 16 Sep 2018 03:15:43 -0700
Labels:         app=helloworld
Annotations:    <none>
Status:         Running
IP:             172.17.0.5
Controlled By:  ReplicationController/helloworld-controller
Containers:
  k8s-demo:
    Container ID:   docker://ecddc1639c5f765f8d1d294bd532a74c27d40437525faa75cb852bcc97259be0
    Image:          wardviaene/k8s-demo
    Image ID:       docker-pullable://wardviaene/k8s-demo@sha256:2c050f462f5d0b3a6430e7869bcdfe6ac48a447a89da79a56d0ef61460c7ab9e
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Sun, 16 Sep 2018 03:15:52 -0700
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-xbz6m (ro)
Conditions:
  Type           Status
  Initialized    True 
  Ready          True 
  PodScheduled   True 
Volumes:
  default-token-xbz6m:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-xbz6m
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason                 Age   From               Message
  ----    ------                 ----  ----               -------
  Normal  Scheduled              1m    default-scheduler  Successfully assigned helloworld-controller-4h998 to minikube
  Normal  SuccessfulMountVolume  1m    kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-xbz6m"
  Normal  Pulling                1m    kubelet, minikube  pulling image "wardviaene/k8s-demo"
  Normal  Pulled                 1m    kubelet, minikube  Successfully pulled image "wardviaene/k8s-demo"
  Normal  Created                1m    kubelet, minikube  Created container
  Normal  Started                1m    kubelet, minikube  Started container
=====

kubectl scale --replicas=4 -f helloworld-replication-controller.yml
#replicationcontroller/helloworld-controller scaled

kubectl get rc
#NAME                    DESIRED   CURRENT   READY     AGE
#helloworld-controller   4         4         4         8m

kubectl scale --replicas=1 rc/helloworld-controller
#replicationcontroller/helloworld-controller scaled

kubectl delete rc/helloworld-controller
#replicationcontroller "helloworld-controller" deleted

#### deployments
## replication controller vs replication set
# replication set is the next generation replication controller
# it supports a new selector that can do selection based on filtering according a set of values
## "environment" either "dev" or "qa"
## not only based on equality, like replication controller ("environment" == "dev")
# replica set is used by deployment object

## deployment declaration allows to do app deployments and updates
# when using deployment object, state of app can be defined
## kubernetes makes sure the clusters matches the desired state
# replication controller or replication set might be cumbersome to deploy apps
## deployment object is easier to use and gives more possibilities

## what can be done
# create a deployment
# update a deployment
# do rolling updates (zero downtime deployments)
# roll back to a previous version
# pause/resume a deployment (eg roll-out to only a certain percentage)

=====
kubectl get deployments
kubectl get rs
kubectl get pods --show-labels
kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2
kubectl edit deployment/helloworld-deployment
kubectl rollout status deployment/helloworld-deployment
kubectl rollout history deployment/helloworld-deployment
kubectl rollout undo deployment/helloworld-deployment
kubectl rollout undo deployment/helloworld-deployment --to-revision=n
=====

kubectl create -f helloworld-deployment.yml 
#kubectl create -f helloworld-deployment.yml --record
#deployment.extensions/helloworld-deployment created
kubectl get deployments
#NAME                    DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
#helloworld-deployment   2         2         2            2           12s
kubectl get rs
#NAME                               DESIRED   CURRENT   READY     AGE
#helloworld-deployment-7c5fb67d9b   2         2         2         16s
kubectl rollout status deployment/helloworld-deployment
#deployment "helloworld-deployment" successfully rolled out

kubectl expose deployment helloworld-deployment --type=NodePort
#service/helloworld-deployment exposed
kubectl get service
#NAME                    TYPE        CLUSTER-IP    EXTERNAL-IP   PORT(S)          AGE
#helloworld-deployment   NodePort    10.103.62.7   <none>        3000:31408/TCP   8s
#kubernetes              ClusterIP   10.96.0.1     <none>        443/TCP          3d
kubectl describe service helloworld-deployment
=====
Name:                     helloworld-deployment
Namespace:                default
Labels:                   app=helloworld
Annotations:              <none>
Selector:                 app=helloworld
Type:                     NodePort
IP:                       10.103.62.7
Port:                     <unset>  3000/TCP
TargetPort:               3000/TCP
NodePort:                 <unset>  31408/TCP
Endpoints:                172.17.0.4:3000,172.17.0.5:3000
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
=====

minikube service helloworld-deployment --url
#http://192.168.99.100:31408

curl http://192.168.99.100:31408
#Hello World!

kubectl set image deployment/helloworld-deployment k8s-demo=wardviaene/k8s-demo:2
#deployment.extensions/helloworld-deployment image updated
kubectl rollout status deployment/helloworld-deployment
#deployment "helloworld-deployment" successfully rolled out

curl http://192.168.99.100:31408
#Hello World v2!

kubectl rollout history deployment/helloworld-deployment
#deployments "helloworld-deployment"
#REVISION  CHANGE-CAUSE
#1         <none>
#2         <none>

kubectl rollout undo deployment/helloworld-deployment
#deployment.extensions/helloworld-deployment

curl http://192.168.99.100:31408
Hello World!

kubectl delete deployment helloworld-deployment
#deployment.extensions "helloworld-deployment" deleted
kubectl delete service helloworld-deployment
#service "helloworld-deployment" deleted

#### services
# pods are very dynamic, they come and go on the kubernetes cluster
## when using replication controller, pods are terminated and created during scaling operations
## when using deployments, when updating the image version, pods are terminated and new pods take the place of older pods
# pods should never be accessed directly but always through a service
# service is the local bridge between the mortal pods and other services or end-users
# when using 'kubectl expose', a new service for a pod is created, which can be accessed externally
# creating a service will create an endpoint for your pod(s)
## ClusterIP - virtual ip address only reachable from within the cluster (default)
## NodePort - port that's the same on each node and reachable externally
## LoadBalancer - created by cloud provider that'll route external traffic to every node on it (eg ELB on AWS)
## these options only allow to create virtual ips or ports
# by default service can only run between ports 30000-32767 but can be changed by adding --service-node-port-range to kube-apiserver (in the init scripts)

# another possibility is to use DNS names
## ExternalName can provide a DNS name for the service
## eg for service discovery using DNS
## only works when DNS add-on is enabled
## later

kubectl create -f helloworld.yml 
#pod/nodehelloworld.example.com created
kubectl create -f helloworld-nodeport-service.yml 
#service/helloworld-service created
minikube service helloworld-service --url
#http://192.168.99.100:31001

curl http://192.168.99.100:31001
#Hello World!

kubectl get services
#NAME                 TYPE        CLUSTER-IP     EXTERNAL-IP   PORT(S)           AGE
#helloworld-service   NodePort    10.99.122.26   <none>        31001:31001/TCP   2m
#kubernetes           ClusterIP   10.96.0.1      <none>        443/TCP           4d

kubectl describe service helloworld-service
=====
Name:                     helloworld-service
Namespace:                default
Labels:                   <none>
Annotations:              <none>
Selector:                 app=helloworld
Type:                     NodePort
IP:                       10.99.122.26
Port:                     <unset>  31001/TCP
TargetPort:               nodejs-port/TCP
NodePort:                 <unset>  31001/TCP
Endpoints:                172.17.0.4:3000
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
=====

#### labels
# key value pairs
## key: environment, value: dev/staging/qa/prod
## key: department, value: engineering/finance/marketing
# labels not unique and multiple labels can be added to one object
# Label Selectors can be used to narrow down results
# matching expressions can be used to match labels
## eg particular pod can only run on a node labeled with 'environment' equals 'development'
## eg more complex matching eg) 'environment' in 'development' or 'qa'
## first tag the node and then add a nodeSelector to pod configuration

kubectl label nodes node1 hardware=high-spec
kubectl label nodes node2 hardware=low-spec

kubectl get nodes --show-labels
kubectl label nodes minikube hardware=high-spec
kubectl create -f helloworld-deployment-nodeselector.yml
kubectl delete deployment helloworld-deployment

#### health checks
# 2 types
## running a command in the container periodically
## periodic checks on a URL (HTTP)

kubectl create -f helloworld-pod-healthcheck.yml 
kubectl describe pod nodehelloworld.example.com
#Liveness: http-get http://:3000/ delay=15s timeout=30s period=10s #success=1 #failure=3

kubectl edit pod nodehelloworld.example.com

#### secrets
# secrets providesa way to distribute credentials, keys, passwords or secret data to the pods
## another way is using external vault service
# secrets can be used
## as environment variables
## as a file in a pod - uses volumes to be mounted in a container
## use an external image to pull secrets (from a private image registry)

# using files
mkdir secrets \
  && echo -n 'root' > ./secrets/username.txt \
  && echo -n 'password' > ./secrets/password.txt
kubectl create secret generic db-user-pass --from-file=./secrets/username.txt --from-file=./secrets/password.txt

# ssh key or ssl certificate
kubectl create secret generic ssl-certificate --from-file=ssh-privatekey=~/.ssh/id_rsa --ssl-cert=ssl-sert=mysslcert.crt

# yaml file
helloworld-secrets.yml

kubectl create -f helloworld-secrets.yml

# helloworld-deployment-secrets-volume.yml
# credits will be stored in
# /etc/creds/db-secret/username
# /etc/creds/db-secret/password

kubectl create -f helloworld-secrets.yml
kubectl create -f helloworld-deployment-healthcheck-secrets-volume.yml 

kubectl describe pod helloworld-deployment-56759bb87-82rk8
=====
Containers:
...
    Mounts:
      /etc/creds from credvolume (ro)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-xbz6m (ro)
Volumes:
  credvolume:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  db-secret
    Optional:    false
  default-token-xbz6m:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-xbz6m
    Optional:    false
=====

kubectl exec helloworld-deployment-56759bb87-82rk8 -it -- /bin/bash
cat /etc/creds/username
cat /etc/creds/password
mount

kubectl delete deployment helloworld-deployment
kubectl delete secret db-secret


kubectl create -f wordpress/wordpress-secrets.yml 
kubectl create -f wordpress/wordpress-single-deployment-no-volumes.yml 
#kubectl rollout status deployment/wordpress-deployment
kubectl create -f wordpress/wordpress-service.yml

minikube service wordpress-service --url
#http://192.168.99.100:31001

kubectl delete service wordpress-service
kubectl delete deployment wordpress-deployments
kubectl delete secret wordpress-secrets

#### web ui
# get an overview of running applications on cluster
# creating/modifying individual kubernetes resources and workloads (like kubectl create/delete)
# retrieve information on the state of resources (like kubectl describe)
# can be accessed at https://<kubernetes-master>/ui
## if not, can be installed manually using
### kubectl create -f https://rawgit.com/kubernetes/dashboard/master/src/deploy/kubernetes-dashboard.yaml
## if password asked, retrieve it by entering kubectl config view
## on minikube, 'minikube dashboard' to launch and 'minikube dashboard --url' for the url
