#### service discovery
# as of kubernetes 1.3, DNS is a built-in service launched automatically using addon manager
## addons are in /etc/kubernetes/addons directory on master node
# DNS service can be used within pods to find other services running on the same cluster
# multiple containers within 1 pod don't need this service, as they can contact each other directly
## container in the same pod can connect the port of the other container directly using localhost:port
# To DNS works, a pod will need a service definition

kubectl create -f service-discovery/secrets.yml
kubectl create -f service-discovery/database.yml
kubectl create -f service-discovery/database-service.yml
kubectl create -f service-discovery/helloworld-db.yml
kubectl create -f service-discovery/helloworld-db-service.yml

minikube service helloworld-db-service --url
# http://192.168.99.100:30706

#echo cm9vdHBhc3N3b3Jk | base64 --decode

kubectl exec database -it -- mysql -u root -p
show databases;
use helloworld;
show tables;
select * from visits;

kubectl run -i --tty busybox --image=busybox --restart=Never -- sh

#https://kubernetes.io/docs/tasks/administer-cluster/dns-debugging-resolution/
kubectl create -f busybox.yml

kubectl exec -it busybox -- nslookup helloworld-db-service
=====
Server:    10.96.0.10
Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local

Name:      helloworld-db-service
Address 1: 10.109.126.53 helloworld-db-service.default.svc.cluster.local
=====

kubectl exec -it busybox -- nslookup database-service
=====
Server:    10.96.0.10
Address 1: 10.96.0.10 kube-dns.kube-system.svc.cluster.local

Name:      database-service
Address 1: 10.98.254.201 database-service.default.svc.cluster.local
=====

kubectl exec -it busybox -- nslookup kubernetes.default
kubectl exec -it busybox -- cat /etc/resolve.conf

#### ConfigMap
# configuration parameters that are not secret, can be put in a ConfigMap
# key-value pairs that can be read by the app using
## environment variables
## container commandline arguments in the pod configuration
## volumes
# can also contain full configuration files
## eg webserver config files
## can then be mounted using volumes where the app expects its config file
## can inject configuration settings into containers without changing container itself

cat <<EOF > app.properties
driver=jdbc
param.with.hierarchy=foo
...
EOF
kubectl create configmap app-config --from-file=app.properties

kubectl create configmap nginx-config --from-file=configmap/reverseproxy.conf
#kubectl describe configmap nginx-config
#kubectl get configmap nginx-config -o yaml
kubectl create -f configmap/nginx.yml
kubectl create -f configmap/nginx-service.yml

minikube service helloworld-nginx-service --url
#http://192.168.99.100:31952
curl http://192.168.99.100:31952 -v

kubectl exec -it helloworld-nginx -c nginx -- bash
cat /etc/nginx/conf.d/reverseproxy.conf

#### Ingress
# Ingress is a solution available since kubernetes 1.1 that allows inbound connections to the cluster
# alternative to the external LoadBalancer and nodePorts
## Ingress allows you to easily expose services that need to be accessible from outside to the cluster
# with Ingress, it's possible to run own ingress controller (basically a loadbalancer) within the kubernetes cluster
# there's a default Ingress controllers or can write own

minikube create -f ingress/ingress.yml
minikube create -f ingress/nginx-ingress-controller.yml
minikube create -f ingress/echoservice.yml
minikube create -f ingress/helloworld-v1.yml
minikube create -f ingress/helloworld-v2.yml

minikube ip
#192.168.99.100

curl 192.168.99.100 -H 'Host: helloworld-v1.example.com'
curl 192.168.99.100 -H 'Host: helloworld-v2.example.com'

#### Volumes
# volumes in kubernetes allow to store data outside the container
# when a container stop, all data on the container itself is lost
# persistent volumes in kubernetes allow to attach a volume to a container that will exist even when the container stops







