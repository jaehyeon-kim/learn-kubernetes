```
## node and yarn
curl -sL https://deb.nodesource.com/setup_8.x -o nodesource_setup.sh \
    && sudo bash nodesource_setup.sh \
    && sudo apt-get install -y nodejs

curl -sL https://dl.yarnpkg.com/debian/pubkey.gpg | sudo apt-key add - \
    && echo "deb https://dl.yarnpkg.com/debian/ stable main" | sudo tee /etc/apt/sources.list.d/yarn.list \
    && sudo apt-get update \
    && sudo apt-get install -y yarn

## chrome
wget -q -O - https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
sudo apt-get update \
    & sudo apt-get -y install google-chrome-stable

## vscode
curl https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg
sudo install -o root -g root -m 644 microsoft.gpg /etc/apt/trusted.gpg.d/
sudo sh -c 'echo "deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main" > /etc/apt/sources.list.d/vscode.list'

sudo apt-get install -y apt-transport-https \
    && sudo apt-get update \
    && sudo apt-get install -y code # or code-insiders

## docker
sudo apt-get remove docker docker-engine docker.io
sudo apt-get update && sudo apt-get install -y \
    apt-transport-https \
    ca-certificates \
    curl \
    software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo apt-key fingerprint 0EBFCD88
sudo add-apt-repository \
   "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
   $(lsb_release -cs) \
   stable"
sudo apt-get update && sudo apt-get install -y docker-ce

sudo groupadd docker && sudo usermod -aG docker $USER
sudo systemctl enable docker

## docker compose
sudo curl -L "https://github.com/docker/compose/releases/download/1.22.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
sudo chmod +x /usr/local/bin/docker-compose
#sudo rm /usr/local/bin/docker-compose

## R and RStudio
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 51716619E084DAB9
sudo add-apt-repository 'deb https://ftp.ussg.iu.edu/CRAN/bin/linux/ubuntu xenial/' \
    && sudo apt-get update \
    && sudo apt-get install -y r-base r-base-dev

rstudio_installer=rstudio-1.1.456-amd64.deb\
    && sudo apt-get install -y gdebi-core \
    && wget https://download1.rstudio.org/$rstudio_installer \
    && sudo gdebi $rstudio_installer \
    && rm $rstudio_installer

docker run --name rstudio -it -p 8787:8787 talpep/base /bin/bash
rstudio-server start
```

```
#### kubernetes
## virtualbox, minikube, kubectl
sudo apt-get update \
    && sudo apt-get install -y virtualbox virtualbox-ext-pack

curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 \
    && chmod +x minikube \
    && sudo mv -v minikube /usr/local/bin

sudo apt-get update \
    && sudo apt-get install -y apt-transport-https
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
sudo touch /etc/apt/sources.list.d/kubernetes.list \
    && echo "deb http://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update \
    && sudo apt-get install -y kubectl

docker version
minikube version
kubectl version

https://darkowlzz.github.io/post/minikube-config/
# https://12factor.net/
minikube start --alsologtostderr --memory 4096
Starting local Kubernetes v1.10.0 cluster...
Starting VM...
Downloading Minikube ISO
 160.27 MB / 160.27 MB [============================================] 100.00% 0s
Getting VM IP address...
Moving files into cluster...
Downloading kubeadm v1.10.0
Downloading kubelet v1.10.0
Finished Downloading kubelet v1.10.0
Finished Downloading kubeadm v1.10.0
Connecting to cluster...
Setting up kubeconfig...
Starting cluster components...
Kubectl is now configured to use the cluster.
Loading cached images from config file.

minikube status
kubectl cluster-info
minikube stop
minikube start --memory 4096

kubectl run hello-minikube --image=gcr.io/google_containers/echoserver:1.4 --port=8080
# deployment "hello-minikube" created
kubectl expose deployment hello-minikube --type=NodePort
# service "hello-minikube" exposed
kubectl get service
minikube service hello-minikube --url
# http://192.168.99.100:32765
```

```
pod
* an app running on Kubernetes
* can contain one or more tightly coupled containers, that make up the app
** containers can easily communicate with each other using their local port number

kubectl get node
#NAME       STATUS    ROLES     AGE       VERSION
#minikube   Ready     master    1d        v1.10.0

kubectl create -f helloworld.yml
#pod/nodehelloworld.example.com created

kubectl get pod
#NAME                         READY     STATUS              RESTARTS   AGE
#nodehelloworld.example.com   0/1       ContainerCreating   0          41s

kubectl describe pod nodehelloworld.example.com
=====
Name:         nodehelloworld.example.com
Namespace:    default
Node:         minikube/10.0.2.15
Start Time:   Fri, 14 Sep 2018 01:49:26 -0700
Labels:       app=helloworld
Annotations:  <none>
Status:       Running
IP:           172.17.0.4
Containers:
  k8s-demo:
    Container ID:   docker://fe5681e0da02b9320691ff017083dc2b742faf620ac23dd8432a28e6432fa571
    Image:          wardviaene/k8s-demo
    Image ID:       docker-pullable://wardviaene/k8s-demo@sha256:2c050f462f5d0b3a6430e7869bcdfe6ac48a447a89da79a56d0ef61460c7ab9e
    Port:           3000/TCP
    Host Port:      0/TCP
    State:          Running
      Started:      Fri, 14 Sep 2018 01:58:38 -0700
    Ready:          True
    Restart Count:  0
    Environment:    <none>
    Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-xbz6m (ro)
Conditions:
  Type           Status
  Initialized    True 
  Ready          True 
  PodScheduled   True 
Volumes:
  default-token-xbz6m:
    Type:        Secret (a volume populated by a Secret)
    SecretName:  default-token-xbz6m
    Optional:    false
QoS Class:       BestEffort
Node-Selectors:  <none>
Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s
                 node.kubernetes.io/unreachable:NoExecute for 300s
Events:
  Type    Reason                 Age   From               Message
  ----    ------                 ----  ----               -------
  Normal  Scheduled              10m   default-scheduler  Successfully assigned nodehelloworld.example.com to minikube
  Normal  SuccessfulMountVolume  10m   kubelet, minikube  MountVolume.SetUp succeeded for volume "default-token-xbz6m"
  Normal  Pulling                10m   kubelet, minikube  pulling image "wardviaene/k8s-demo"
  Normal  Pulled                 58s   kubelet, minikube  Successfully pulled image "wardviaene/k8s-demo"
  Normal  Created                51s   kubelet, minikube  Created container
  Normal  Started                50s   kubelet, minikube  Started container
=====

(1)
kubectl port-forward nodehelloworld.example.com 8081:3000
#Forwarding from 127.0.0.1:8081 -> 3000
#Forwarding from [::1]:8081 -> 3000

curl localhost:8081

(2)
kubectl expose pod nodehelloworld.example.com --type=NodePort --name nodehalloworld-service
#service/nodehalloworld-service exposed

kubectl get service
#NAME                     TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)          AGE
#kubernetes               ClusterIP   10.96.0.1       <none>        443/TCP          1d
#nodehalloworld-service   NodePort    10.97.186.169   <none>        3000:30153/TCP   1m

minikube service nodehalloworld-service --url
#http://192.168.99.100:30153

curl http://192.168.99.100:30153


kubectl attach nodehelloworld.example.com

kubectl exec nodehelloworld.example.com -- ls /app
kubectl exec nodehelloworld.example.com -- touch /app/test.txt ## not persistent, use volume for persistecy
kubectl exec nodehelloworld.example.com -- ls /app

kubectl get service
kubectl describe service nodehalloworld-service
=====
Name:                     nodehalloworld-service
Namespace:                default
Labels:                   app=helloworld
Annotations:              <none>
Selector:                 app=helloworld
Type:                     NodePort
IP:                       10.97.186.169
Port:                     <unset>  3000/TCP
TargetPort:               3000/TCP
NodePort:                 <unset>  30153/TCP
Endpoints:                172.17.0.4:3000
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>
=====

kubectl run -i --tty busybox --image=busybox --restart=Never -- sh
====
/ # telnet 172.17.0.4 3000
GET /

HTTP/1.1 200 OK
X-Powered-By: Express
Content-Type: text/html; charset=utf-8
Content-Length: 12
ETag: W/"c-7Qdih1MuhjZehB6Sv8UNjA"
Date: Fri, 14 Sep 2018 09:17:53 GMT
Connection: close

Hello World!Connection closed by foreign host
====

kubectl get service
kubectl delete service nodehalloworld-service
kubectl get pod
kubectl delete pods nodehelloworld.example.com
kubectl delete pods busybox
```

```
# Get information about all running pods
kubectl get pod
# Describe one pod
kubectl describe pod <pod>
# Expose the port of a pod (creates a new service)
kubectl expose pod <pod> --port=444 --name=frontend
# Port forward the exposed pod port to your local machine
kubectl port-forward <pod> 8080
# Attach to the pod
kubectl attach <podname> -i
# Execute a command on the pod
kubectl exec <pod> -- command
# Add a new label to a pod
kubectl label pods <pod> mylabel=awesome
# Run a shell in a pod - very useful for debugging
kubectl run -i --tty busybox --image=busybox --restart=Never -- sh
# Get information on current deployments
kubectl get deployments
# Get information about the replica sets
kubectl get rs
# get pods, and also show labels attached to those pods
kubectl get pods --show-labels
# Get deployment status
kubectl rollout status deployment/helloworld-deployment
# Run k8s-demo with the image label version 2
kubectl set image deployment/helloworld-deployment k8s-demo=k8s-demo:2
# Edit the deployment object
kubectl edit deployment/helloworld-deployment
# Get the status of the rollout
kubectl rollout status deployment/helloworld-deployment
# Get the rollout history
kubectl rollout history deployment/helloworld-deployment
# Rollback to previous version
kubectl rollout undo deployment/helloworld-deployment
# Rollback to any version version
kubectl rollout undo deployment/helloworld-deployment --to-revision=n
```





















